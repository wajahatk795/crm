(function ($) {
    $.fn.imageUploader = function (options) {
        let defaults = {
            preloaded: [],
            imagesInputName: 'images',
            preloadedInputName: 'preloaded',
            label: 'Drag & Drop files here or click to browse'
        };
        let plugin = this;
        plugin.settings = {};
        plugin.init = function () {
            plugin.settings = $.extend(plugin.settings, defaults, options);
            plugin.each(function (i, wrapper) {
                let $container = createContainer();
                $(wrapper).append($container);
                $container.on("dragover", fileDragHover.bind($container));
                $container.on("dragleave", fileDragHover.bind($container));
                $container.on("drop", fileSelectHandler.bind($container));
                if (plugin.settings.preloaded.length) {
                    $container.addClass('has-files');
                    let $uploadedContainer = $container.find('.uploaded');
                    for (let i = 0; i < plugin.settings.preloaded.length; i++) {
                        $uploadedContainer.append(createFilePreview(plugin.settings.preloaded[i].src, plugin.settings.preloaded[i].id, true))
                    }
                }
            })
        };

        let dataTransfer = new DataTransfer();

        let createContainer = function () {
            let $container = $('<div>', { class: 'image-uploader' }), $input = $('<input>', {
                    type: 'file',
                    id: plugin.settings.imagesInputName + '-' + random(),
                    name: plugin.settings.imagesInputName + '[]',
                    multiple: ''
                }).appendTo($container), $uploadedContainer = $('<div>', { class: 'uploaded' }).appendTo($container),
                $textContainer = $('<div>', { class: 'upload-text' }).appendTo($container),
                $i = $('<i>', { class: 'i-Data-Upload', text: '' }).appendTo($textContainer),
                $span = $('<span>', { text: plugin.settings.label }).appendTo($textContainer);

            $container.on('click', function (e) {
                prevent(e);
                $input.trigger('click')
            });
            $input.on("click", function (e) {
                e.stopPropagation()
            });
            $input.on('change', fileSelectHandler.bind($container));
            return $container;
        };

        let prevent = function (e) {
            e.preventDefault();
            e.stopPropagation();
        };

        let createFilePreview = function (file, id, isPreloaded) {
            let $container = $('<div>', { class: 'uploaded-file' });

            if (isImageFile(file)) {
                // If the file is an image, show the image preview
                let $img = $('<img>', { src: isPreloaded ? file : URL.createObjectURL(file) }).appendTo($container);
            } else {
                // If the file is not an image, show the file name
                let $fileName = $('<span>', { text: isPreloaded ? file : file.name }).appendTo($container);
            }

            let $button = $('<button>', { class: 'delete-image' }).appendTo($container),
                $i = $('<i>', { class: 'material-icons i-Close-Window', text: '' }).appendTo($button);

            if (plugin.settings.preloaded.length && isPreloaded) {
                $container.attr('data-preloaded', true);
                let $preloaded = $('<input>', {
                    type: 'hidden',
                    name: plugin.settings.preloadedInputName + '[]',
                    value: id
                }).appendTo($container)
            } else {
                $container.attr('data-index', id);
            }

            $container.on("click", function (e) {
                prevent(e);
            });

            $button.on("click", function (e) {
                prevent(e);
                if ($container.data('index')) {
                    let index = parseInt($container.data('index'));
                    $container.find('.uploaded-file[data-index]').each(function (i, cont) {
                        if (i > index) {
                            $(cont).attr('data-index', i - 1);
                        }
                    });
                    dataTransfer.items.remove(index);
                }
                $container.remove();
                if (!$container.find('.uploaded-file').length) {
                    $container.removeClass('has-files');
                }
            });

            return $container;
        };

        let isImageFile = function (file) {
            if (typeof file === 'string') {
                // Check if the string (presumably a URL) ends with an image file extension
                return file.toLowerCase().endsWith('.png') ||
                    file.toLowerCase().endsWith('.jpg') ||
                    file.toLowerCase().endsWith('.jpeg') ||
                    file.toLowerCase().endsWith('.gif');
            } else if (file instanceof File) {
                // Check the file's MIME type if it's a File object
                return file.type.startsWith('image/');
            }
            return false;
        };

        let fileDragHover = function (e) {
            prevent(e);
            if (e.type === "dragover") {
                $(this).addClass('drag-over');
            } else {
                $(this).removeClass('drag-over');
            }
        };

        let fileSelectHandler = function (e) {
            prevent(e);
            let $container = $(this);
            $container.removeClass('drag-over');
            let files = e.target.files || e.originalEvent.dataTransfer.files;
            setPreview($container, files);
        };

        let setPreview = function ($container, files) {
            $container.addClass('has-files');
            let $uploadedContainer = $container.find('.uploaded'), $input = $container.find('input[type="file"]');
            $(files).each(function (i, file) {
                dataTransfer.items.add(file);
                $uploadedContainer.append(createFilePreview(file, dataTransfer.items.length - 1, false));
            });
            $input.prop('files', dataTransfer.files);
        };

        let random = function () {
            return Date.now() + Math.floor((Math.random() * 100) + 1);
        };

        this.init();
        return this;
    }
}(jQuery));